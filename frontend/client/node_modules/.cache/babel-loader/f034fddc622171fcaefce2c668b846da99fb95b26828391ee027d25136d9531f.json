{"ast":null,"code":"var _jsxFileName = \"/Users/wujunyi/Desktop/Year2_Project/EBB-Control-Panel/frontend/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TableComp from './TableComp';\nimport ReactPolling from \"react-polling/lib/ReactPolling\";\n//https://www.npmjs.com/package/react-polling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tableData33, updateTable33] = useState([[]]);\n  const [polledData, updatePollData] = useState(\"\");\n  const fetchData = () => {\n    return fetch(\"http://localhost:3001/pollServer/\");\n  };\n  const pollingSuccess = jsonResponse => {\n    const txtres = \"Current time at server: \" + jsonResponse.time;\n    updatePollData(txtres);\n    return true;\n  };\n  const pollingFailure = () => {//alert('Polling failed'); //return true;\n  };\n  React.useEffect(() => {\n    ///See CORS\n    /* fetch(\"http://localhost:3001/personQuery/\")\n    .then((res) => res.json())\n    .then((data) => alert(JSON.stringify(data))) .catch((err) => alert(err)\n    );\n    */\n  }, []);\n\n  //handleClick is our event handler for the button click\n  const handleClick = updateMethod => {\n    fetch(\"http://localhost:3001/tableData33/\").then(res => res.json()).then(data => updateMethod(data.tableData33)).catch(err => alert(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ReactPolling, {\n      url: 'http://localhost:3001/pollServer/',\n      interval: 500 // in milliseconds(ms)\n      ,\n      retryCount: 3 // this is optional\n      ,\n      onSuccess: pollingSuccess,\n      onFailure: pollingFailure,\n      promise: fetchData // custom api calling function that should return a promise\n      ,\n      render: _ref => {\n        let {\n          startPolling,\n          stopPolling,\n          isPolling\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [polledData, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableComp, {\n      td: tableData33\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleClick(updateTable33),\n      children: \"Randomize ages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AwQr7sc5RwMGpziUsXYTnO3QS5U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TableComp","ReactPolling","jsxDEV","_jsxDEV","App","_s","tableData33","updateTable33","polledData","updatePollData","fetchData","fetch","pollingSuccess","jsonResponse","txtres","time","pollingFailure","useEffect","handleClick","updateMethod","then","res","json","data","catch","err","alert","className","children","url","interval","retryCount","onSuccess","onFailure","promise","render","_ref","startPolling","stopPolling","isPolling","fileName","_jsxFileName","lineNumber","columnNumber","td","onClick","_c","$RefreshReg$"],"sources":["/Users/wujunyi/Desktop/Year2_Project/EBB-Control-Panel/frontend/client/src/App.js"],"sourcesContent":["\nimport React, {useState} from \"react\";\nimport TableComp from './TableComp';\nimport ReactPolling from \"react-polling/lib/ReactPolling\"; \n//https://www.npmjs.com/package/react-polling\n\nfunction App() {\n  const [tableData33, updateTable33] = useState([[]]); \n  const [polledData, updatePollData] = useState(\"\");\n  const fetchData = () => {\n    return fetch(\"http://localhost:3001/pollServer/\");\n  }\n  const pollingSuccess = (jsonResponse) => {\n    const txtres = \"Current time at server: \" + jsonResponse.time; updatePollData(txtres);\n    return true;\n  }\n  const pollingFailure = () => { //alert('Polling failed'); //return true;\n  }\n  React.useEffect(() => {\n  ///See CORS\n  /* fetch(\"http://localhost:3001/personQuery/\")\n  .then((res) => res.json())\n  .then((data) => alert(JSON.stringify(data))) .catch((err) => alert(err)\n  );\n  */\n  }, []);\n\n  //handleClick is our event handler for the button click\n  const handleClick = (updateMethod) => { \n    fetch(\"http://localhost:3001/tableData33/\")\n      .then((res) => res.json())\n      .then((data) => updateMethod(data.tableData33)) \n      .catch((err) => alert(err)\n  );};\n\n  return (\n    <div className=\"App\">\n      <ReactPolling\n      url={'http://localhost:3001/pollServer/'}\n      interval= {500} // in milliseconds(ms)\n      retryCount={3} // this is optional\n      onSuccess = {pollingSuccess}\n      onFailure= {pollingFailure}\n      promise={fetchData} // custom api calling function that should return a promise\n      render={({ startPolling, stopPolling, isPolling }) => {\n        return <div>{polledData}<br/><br/></div>;\n    }} />\n    <TableComp td = {tableData33}/>\n    <button onClick={() => handleClick(updateTable33)}>Randomize ages</button> </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}